version: '3.8'

services:
  # База данных PostgreSQL
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Backend API на Django
  backend:
    build: ./backend
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8000:8000"
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             (python manage.py createsuperuser --noinput --username $DJANGO_SUPERUSER_USERNAME --email admin@example.com || true) &&
             python manage.py collectstatic --noinput &&
             uvicorn config.asgi:application --host 0.0.0.0 --port 8000 --workers ${UVICORN_WORKERS} --log-level ${UVICORN_LOG_LEVEL}"

  # Frontend на React
  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    env_file:
      - .env
    ports:
      - "3000:80"
    restart: unless-stopped

  # Nginx для статики и проксирования в продакшене
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - ./frontend/build:/var/www/html
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
    restart: unless-stopped
    profiles:
      - prod

volumes:
  postgres_data:
  static_volume:
  media_volume:
  logs_volume: 